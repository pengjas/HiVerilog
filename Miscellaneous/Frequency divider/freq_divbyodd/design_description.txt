Please act as a professional Verilog designer.

A frequency divider that divides the input clock frequency by odd numbers. The module generates a divided clock output by an odd divisor value provided as a parameter.

Module name:
    freq_divbyodd

Input ports:
    clk: Input clock signal.
    rst_n: Active low reset signal that initializes the divider.

Output ports:
    clk_div: Divided clock output.

Implementation:

The module divides the input clock frequency by an odd number defined by the parameter NUM_DIV, which defaults to 5. 
It consists of two submodules: `pos_edge_counter` and `neg_edge_counter`, which count the rising and falling edges of the clock, respectively. 
Each counter counts up to NUM_DIV - 1. 
The `pos_edge_counter` generates a clock output for the positive edge, while the `neg_edge_counter` generates a clock output for the negative edge. 
The final divided clock output, clk_div, is derived by logically OR-ing clk_div1 and clk_div2 to account for both clock edges. 
The active low reset signal rst_n initializes the counters and the clock divider outputs.

Give me the complete code.