Please act as a professional Verilog designer.

Implement a pipeline processor with 5 stages: Fetch, Decode, Execute, Memory, and Writeback.

Module name:
    stagepipe5
Input ports:
    clk: Clock signal.
    rst: Reset signal, active high.
    instr_mem[31:0][0:31]: 32-element instruction memory with 32-bit instructions.
    reg_file[31:0][0:31]: 32-element register file with 32-bit registers.
Output ports:
    res_reg_file[31:0][0:31]: 32-element result register file with 32-bit registers.

Implementation:
In the stagepipe5 module, five pipeline stages are instantiated: fetch_stage, decode_stage, execute_stage, memory_stage, and writeback_stage. The fetch_stage module fetches the next instruction from the instruction memory based on the program counter (pc). The decode_stage module decodes the instruction to identify the source registers (rs1, rs2), destination register (rd), and the operation (op). The execute_stage module performs the operation (addition or subtraction) on the values read from the register file and produces the result. The memory_stage module passes the ALU result to the next stage. Finally, the writeback_stage module writes the result back to the register file. The pc is updated in the fetch_stage to fetch the next instruction in the following cycle. The pipeline ensures continuous instruction processing by passing intermediate data between stages through pipeline registers.

Give me the complete code.
