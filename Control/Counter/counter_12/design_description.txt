Please act as a professional Verilog designer.

Implement a module of a counter design that counts from 4'b0000 to 4'd11, with the counting controlled by an input signal valid_count. The counter should pause when valid_count is 0. It should increment on each clock cycle when valid_count is active and reset to 0 when the reset signal (rst_n) is active.

Module Name:
    counter_12

Input Ports:
    rst_n: Reset signal (active low)
    clk: Clock signal
    valid_count: Signal to enable counting

Output Ports:
    out: 4-bit output representing the current count value

Implementation:
The main module (counter_12) integrates two submodules: counter_logic and output_register.
counter_logic:
If the reset signal is active (!rst_n), the counter resets to 0 (4'b0000).
When valid_count is 1, the counter increments. If the count value equals 4'd11, it wraps around and resets to 0.
output_register:
If the reset signal is active, the output is set to 0.
When valid_count is active, it updates the output with the current count value from counter_logic. If valid_count is 0, it retains the current output.

Give me the complete code.

