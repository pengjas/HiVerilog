Please act as a professional Verilog designer.

Implement a modular version of an 8-bit ring counter for cyclic state sequences.

Module name:
    ring_counter

Input ports:
    clk: Clock signal that drives the state transitions of the ring counter.
    reset: Reset signal to initialize the counter to its starting state.
Output ports:
    out [7:0]: 8-bit output representing the current state of the ring counter. Only one bit is set high at any time, and the set bit cycles through the 8-bit output.

Internal logic:
State Initialization: A submodule initializes the counter to its starting state when the reset signal is high, typically with the least significant bit (LSB) of out set to 1 (i.e., out = 8'b0000_0001).
State Transition: Another submodule handles the cyclic behavior of the ring counter, where the 1 shifts to the next bit in the sequence on each rising edge of the clock signal. After reaching the most significant bit (MSB), it wraps around to the LSB.
Modularity: The design consists of separate submodules for initialization and state transition, promoting better organization and reusability of the code.
Reset Behavior: When reset is high, the ring counter is reset to its initial state (out = 8'b0000_0001).

Give me the complete code.