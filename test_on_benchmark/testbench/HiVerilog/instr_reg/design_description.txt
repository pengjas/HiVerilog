Please act as a professional Verilog designer.

An instruction register module designed to hold and process CPU instructions in a modular way. It captures incoming instructions from various sources and separates them into distinct fields for further processing using submodules.

Module name:
    instr_reg

Input ports:
    clk: Clock signal for synchronization.
    rst: Active low reset signal to initialize the register.
    fetch [1:0]: Control signal indicating the source of the instruction (1 for register, 2 for RAM/ROM).
    data [7:0]: 8-bit data input representing the instruction to be fetched.

Output ports:
    ins [2:0]: High 3 bits of the instruction, indicating the opcode or operation.
    ad1 [4:0]: Low 5 bits of the instruction, representing the register address.
    ad2 [7:0]: The full 8-bit data from the second source.

Implementation:
    The instruction register is implemented using two submodules, each responsible for storing instructions from different sources.
    On the rising edge of the clock (clk), if the reset (rst) signal is low, both instruction outputs are initialized to zero.
    Based on the fetch signal:
    If fetch is 2'b01, the instruction is fetched from the data input into the first submodule (ins_p1).
    If fetch is 2'b10, the instruction is fetched from the data input into the second submodule (ins_p2).
    If neither condition is met, the previous values in both submodules are retained.
    The outputs ins, ad1, and ad2 are derived from the stored instructions in the respective submodules.

Give me the complete code.